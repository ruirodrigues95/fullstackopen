{"version":3,"sources":["services/person.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","newPerson","post","delete","id","update","updatedPerson","put","Filter","onChange","PersonForm","props","onSubmit","value","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","persons","onDelete","map","person","name","number","onClick","Notification","notification","Fragment","className","message","App","useState","setPersons","setNewName","setNewNumber","filter","setFilter","setNotification","useEffect","initialPersons","personsToShow","toLowerCase","indexOf","timeout","setTimeout","clearTimeout","contactExists","find","e","target","preventDefault","existingPerson","window","confirm","returnedPerson","prevState","catch","error","finally","concat","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbbbebdc.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nconst personService = {\n  getAll: () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n  },\n  create: newPerson => {\n    const request = axios.post(baseUrl, newPerson);\n    return request.then(response => response.data);\n  },\n  delete: id => {\n    return axios.delete(`${baseUrl}/${id}`);\n  },\n  update: (id, updatedPerson) => {\n    const request = axios.put(`${baseUrl}/${id}`, updatedPerson);\n    return request.then(response => response.data);\n  },\n};\n\nexport default personService;\n","const Filter = ({ onChange }) => {\n  return (\n    <div>\n      filter shown with <input onChange={onChange} />\n    </div>\n  )\n}\n\nexport default Filter\n","const PersonForm = props => {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonForm\n","const Persons = ({ persons, onDelete }) => {\n  return (\n    <ul>\n      {persons.map(person => (\n        <li key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => onDelete(person)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Persons\n","import React from 'react'\n\nconst Notification = ({ notification }) => {\n  const { type } = notification\n\n  return (\n    <React.Fragment>\n      {notification !== null && (\n        <div className={`notification ${type}`}>{notification.message}</div>\n      )}\n    </React.Fragment>\n  )\n}\n\nexport default Notification\n","import React, { useEffect, useState } from 'react'\nimport personService from './services/person'\n\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }, [])\n\n  const handleNameChange = e => {\n    setNewName(e.target.value)\n  }\n\n  const handleNumberChange = e => {\n    setNewNumber(e.target.value)\n  }\n\n  const handleSearchChange = e => {\n    setFilter(e.target.value)\n  }\n\n  const personsToShow =\n    filter === ''\n      ? persons\n      : persons.filter(\n          person => person.name.toLowerCase().indexOf(filter.toLowerCase()) >= 0\n        )\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [notification])\n\n  const addNewPerson = e => {\n    e.preventDefault()\n\n    const existingPerson = contactExists(newName)\n\n    if (!existingPerson) {\n      const newPerson = {\n        name: newName,\n        number: newNumber,\n      }\n\n      personService.create(newPerson).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n\n        setNotification({\n          type: 'success',\n          message: `Added ${returnedPerson.name}`,\n        })\n      }).catch(error => setNotification({\n        type: 'error',\n        message: error\n      }))\n    } else {\n      const confirm = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      )\n\n      if (confirm) {\n        const updatedPerson = { ...existingPerson, number: newNumber }\n        const id = existingPerson.id\n        personService\n          .update(id, updatedPerson)\n          .then(returnedPerson => {\n            setPersons(prevState => {\n              return prevState.map(person =>\n                person.id !== id ? person : returnedPerson\n              )\n            })\n            setNotification({\n              type: 'success',\n              message: `Edited ${newName}'s number`,\n            })\n          })\n          .catch(error => {\n            setNotification({\n              type: 'error',\n              message: `Information of ${newName} has already been deleted from server`,\n            })\n            setPersons(prevState => {\n              return prevState.filter(person => person.id !== id)\n            })\n          })\n          .finally(() => {\n            setNewName('')\n            setNewNumber('')\n          })\n      }\n    }\n  }\n\n  const deletePersonHandler = person => {\n    const confirm = window.confirm(`Delete ${person.name} ?`)\n\n    if (confirm) {\n      personService.delete(person.id).then(() => {\n        setPersons(prevState => {\n          return prevState.filter(p => p.id !== person.id)\n        })\n      })\n    }\n  }\n\n  const contactExists = name => {\n    return persons.find(person => person.name === name)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      {notification !== null && <Notification notification={notification} />}\n      <Filter onChange={handleSearchChange} />\n      <h3>Add a new</h3>\n      <PersonForm\n        onSubmit={addNewPerson}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h1>Numbers</h1>\n      <Persons persons={personsToShow} onDelete={deletePersonHandler} />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}